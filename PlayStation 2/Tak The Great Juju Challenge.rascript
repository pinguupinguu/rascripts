// Tak: The Great Juju Challenge
// #ID = 19483

// $4D37EC: [8bit] Juju Potions - Blessing Gem 2 Card
//          0x00=Unavailable
//          0x01=Collected
// $4D3DD4: [32bit] Blessing Gems - Tak Health Bonus 1
//          0x00=No
//          0x01=Applied
// $4D3DD8: [32bit] Blessing Gems - Tak Health Bonus 1 ID
//          0x00=Unavailable
//          0x01=ID & Slot Open
// $4D3DF4: [32bit] Blessing Gems - Tak Health Bonus 2
//          0x00=No
//          0x01=Applied
// $4D3DF8: [32bit] Blessing Gems - Tak Health Bonus 2 ID
//          0x00=No
//          0x08=ID & Slot Open
// $4D3E14: [32bit] Blessing Gems - Tak Health Bonus 3
//          0x00=No
//          0x01=Applied
// $4D3E18: [32bit] Blessing Gems - Tak Health Bonus 3 ID
//          0x00=No
//          0x0a=ID & Slot Open
// $4D3E34: [32bit] Blessing Gems - Tak Spell Bonus 1
//          0x00=No
//          0x01=Applied
// $4D3E38: [32bit] Blessing Gems - Tak Spell Bonus 1 ID
//          0x00=No
//          0x03=ID & Slot Open
// $4D3E54: [32bit] Blessing Gems - Tak Spell Bonus 2
//          0x00=No
//          0x01=Applied
// $4D3E58: [32bit] Blessing Gems - Tak Spell Bonus 2 ID
//          0x00=No
//          0x06=ID & Slot Open
// $4D3E74: [32bit] Blessing Gems - Tak Spell Bonus 3
//          0x00=No
//          0x01=Applied
// $4D3E78: [32bit] Blessing Gems - Tak Spell Bonus 3 ID
//          0x00=No
//          0x09=ID & Slot Open
// $4D3E94: [32bit] Blessing Gems - Tak Mana Bonus 1
//          0x00=No
//          0x01=Applied
// $4D3E98: [32bit] Blessing Gems - Tak Mana Bonus 1 ID
//          0x00=No
//          0x01=ID & Slot Open
// $4D3EB4: [32bit] Blessing Gems - Tak Mana Bonus 2
//          0x00=No
//          0x01=Applied
// $4D3EB8: [32bit] Blessing Gems - Tak Mana Bonus 2 ID
//          0x00=No
//          0x05=ID & Slot Open
// $4D3ED4: [32bit] Blessing Gems - Tak Mana Bonus 3
//          0x00=No
//          0x01=Applied
// $4D3ED8: [32bit] Blessing Gems - Tak Mana Bonus 3 ID
//          0x00=No
//          0x0c=ID & Slot Open
// $4D3EF4: [32bit] Blessing Gems - Lok Health Bonus 1
//          0x00=No
//          0x01=Applied
// $4D3EF8: [32bit] Blessing Gems - Lok Health Bonus 1 ID
//          0x00=Unavailable
//          0x01=ID & Slot Open
// $4D3F14: [32bit] Blessing Gems - Lok Health Bonus 2
//          0x00=No
//          0x01=Applied
// $4D3F18: [32bit] Blessing Gems - Lok Health Bonus 2 ID
//          0x00=Unavailable
//          0x08=ID & Slot Open
// $4D3F34: [32bit] Blessing Gems - Lok Health Bonus 3
//          0x00=No
//          0x01=Applied
// $4D3F38: [32bit] Blessing Gems - Lok Health Bonus 3 ID
//          0x00=Unavailable
//          0x0a=ID & Slot Open
// $4D3F54: [32bit] Blessing Gems - Lok Combat Bonus 1
//          0x00=No
//          0x01=Applied
// $4D3F58: [32bit] Blessing Gems - Lok Combat Bonus 1 ID
//          0x00=Unavailable
//          0x03=ID & Slot Open
// $4D3F74: [32bit] Blessing Gems - Lok Combat Bonus 2
//          0x00=No
//          0x01=Applied
// $4D3F78: [32bit] Blessing Gems - Lok Combat Bonus 2 ID
//          0x00=Unavailable
//          0x06=ID & Slot Open
// $4D3F94: [32bit] Blessing Gems - Lok Combat Bonus 3
//          0x00=No
//          0x01=Applied
// $4D3F98: [32bit] Blessing Gems - Lok Combat Bonus 3 ID
//          0x00=Unavailable
//          0x09=ID & Slot Open
// $4D3FB4: [32bit] Blessing Gems - Lok Combat Bonus 4
//          0x00=No
//          0x01=Applied
// $4D3FB8: [32bit] Blessing Gems - Lok Combat Bonus 4 ID
//          0x00=Unavailable
//          ?=ID & Slot Open
// $4D3FD4: [32bit] Blessing Gems - Lok Mana Bonus 1
//          0x00=No
//          0x01=Applied
// $4D3FD8: [32bit] Blessing Gems - Lok Mana Bonus 1 ID
//          0x00=Unavailable
//          0x01=ID & Slot Open
// $4D3FF4: [32bit] Blessing Gems - Lok Mana Bonus 2
//          0x00=No
//          0x01=Applied
// $4D3FF8: [32bit] Blessing Gems - Lok Mana Bonus 2 ID
//          0x00=Unavailable
//          0x05=ID & Slot Open
// $4D4014: [32bit] Blessing Gems - Lok Mana Bonus 3
//          0x00=No
//          0x01=Applied
// $4D4018: [32bit] Blessing Gems - Lok Mana Bonus 3 ID
//          0x00=Unavailable
//          0x0c=ID & Slot Open
// $4D8FCC: [32bit] Partner Can Follow
//          0x00=Yes
//          0x01=No
// $5473A4: [32bit] Level ID
//          0x00=Feathercrag (Tutorial)
//          0x01=The Juju Realm
//          0x02=Silver Stone Coast
//          0x03=Temple of Light
//          0x04=Caster's Hill
//          0x05=Proving Grounds One
//          0x07=Kiro Biro
//          0x08=Parchlands
//          0x09=Gates of Nocturne
//          0x0a=Proving Grounds Two
//          0x0c=Fowler's Murk
//          0x0d=The Deepwood
//          0x0e=Ambush Grove
//          0x0f=Proving Grounds Three
//          0x11=Ghastfall
//          0x12=Obocodobo Crypt
//          0x14=Proving Grounds Final
//          0x21=Main Menu
function level_ID() => dword(0x5473A4)
CONST_DEFAULT_SCORE = 0xffffffff
// $54743C: [32bit] Silver Stone Coast - High Score
function silver_stone_high_score() => dword(0x54743C)
function save_protection() => dword(0x5473A4) != 0x21
achievement(
    "A Stolen Feather",
    "Clear Tutorial: Feathercrag",
    points=5,
    trigger=
        silver_stone_high_score() == CONST_DEFAULT_SCORE &&
        prev(level_ID()) == 0x00 &&
        level_ID() == 0x1
)
// $54747C: [32bit] Silver Stone Coast - Current Score
// $5474BC: [32bit] Juju Realm Leaderboard Score - Team Black Mist
// $5474FC: [32bit] Juju Realm Leaderboard Score - Team Jibba Jabba
function progression(high_score) => save_protection() && prev(high_score) == CONST_DEFAULT_SCORE && high_score != CONST_DEFAULT_SCORE
achievement(
    "It's An Ambush!",
    "Clear Silver Stone Coast",
    points=10,
    trigger=
        progression(silver_stone_high_score())
        
)
// $54757C: [32bit] Temple of Light - High Score
function temple_light_high_score() => dword(0x54757C)
achievement(
    "Sand, Torches, and Magma",
    "clear Temple of Light",
    points=10,
    trigger=
        progression(temple_light_high_score())
)
// $5475BC: [32bit] Temple of Light - Current Score

// $5476BC: [32bit] Caster's Hill - High Score
function casters_high_score() => dword(0x5476BC)
achievement(
    "Lok's Gorilla Wife",
    "Clear Caster's Hill",
    points=10,
    trigger=
        progression(casters_high_score())
)
// $5476FC: [32bit] Caster's Hill - Current Score

// $54793C: [32bit] Kiro Biro - High Score
function kiro_biro_high_score() => dword(0x54793C)
achievement(
    "Underwater Lobster Exploration!",
    "Clear Kiro Biro",
    points=10,
    trigger=
        progression(kiro_biro_high_score())
)
// $54797C: [32bit] Kiro Biro - Current Score

// $547A7C: [32bit] Parchlands - High Score
function parchlands_high_score() => dword(0x547A7C)
achievement(
    "Desert Exploration",
    "Clear Parchlands",
    points=10,
    trigger=
        progression(parchlands_high_score())
)
// $547ABC: [32bit] Parchlands - Current Score

// $547BBC: [32bit] Gates of Nocturne - High Score
function nocturne_high_score() => dword(0x547BBC)
achievement(
    "The World of Dreams",
    "Clear Gates of Nocturne",
    points=10,
    trigger=
        progression(nocturne_high_score())
)
// $547BFC: [32bit] Gates of Nocturne - Current Score

// $547E3C: [32bit] Fowler's Murk - High Score
function fowler_high_score() => dword(0x547E3C)
achievement(
    "A Trusty Chicken Suit",
    "Clear Fowler's Murk",
    points=10,
    trigger=
        progression(fowler_high_score())
)
// $547E7C: [32bit] Fowler's Murk - Current Score

// $547F7C: [32bit] The Deepwood - High Score
function deepwood_high_score() => dword(0x547F7C)
achievement(
    "Lok's Treacherous Climb",
    "Clear The Deepwood",
    points=10,
    trigger=
        progression(deepwood_high_score())
)
// $547FBC: [32bit] The Deepwood - Current Score

// $5480BC: [32bit] Ambush Grove - High Score
function ambush_high_score() => dword(0x5480BC)
achievement(
    "Foggy Navigation",
    "Clear Ambush Grove",
    points=10,
    trigger=
        progression(ambush_high_score())
)
// $5480FC: [32bit] Ambush Grove - Current Score

// $54833C: [32bit] Ghastfall - High Score
function ghastfall_high_score() => dword(0x54833C)
achievement(
    "Run Sheep, Run!",
    "Clear Ghastfall",
    points=10,
    trigger=
        progression(ghastfall_high_score())
)
// $54837C: [32bit] Ghastfall - Current Score

// $54847C: [32bit] Obocdobo Crypt - High Score
function crypt_high_score() => dword(0x54847C)
achievement(
    "Scary Slicers!",
    "Clear Obocodobo Crypt",
    points=10,
    trigger=
        progression(crypt_high_score())
)
achievement(
    "Tak: The True Power of Juju",
    "Fully upgade Tak's Blessing Gem slots",
    points=5,
    trigger=
        save_protection() &&
        prev(sum_of(range(0x4d3dd4, 0x4d3ed8, 0x20), b => dword(b))) == 8 &&
        measured(sum_of(range(0x4d3dd4, 0x4d3ed8, 0x20), b => dword(b)) == 9)
)
achievement(
    "Lok: The Amazing Warrior",
    "Fully upgrade Lok's Blessing Gem slots",
    points=5,
    trigger=
        save_protection() &&
        prev(sum_of(range(0x4d3ef4, 0x4d4014, 0x20), b => dword(b))) == 9 &&
        measured(sum_of(range(0x4d3ef4, 0x4d4014, 0x20), b => dword(b)) == 10) 
)
// $56690C: [32bit] Game Pause
//          0x00=yes
//          0x03=no
function game_pause() => dword(0x56690C)
yes = 0
no = 3
// $5484BC: [32bit] Obocdobo Crypt - Current Score
// $548CFC: [32bit] Juju Realm Leaderboard Score - Team Pupanunu
// $548D3C: [32bit] Juju Realm Leaderboard Score - Team Grammazon
// $54A17C: [32bit] Number of Blessing Gems
function blessingems_count() => dword(0x54A17C)

// $54C858: [32bit] Door FLag?

// $55DE6C: [Float] Number of Bugs
function bugs() => float(0x55DE6C)

// $55DE78: [Float] Number of Gemstones
function gemstones() => float(0x55DE78)

// $55DE84: [Float] Number of Fruits
function fruits() => float(0x55DE84)

// $55DEA8: [Float] Tak - Juju Speed
// $55DEB0: [Float] Tak - Juju Speed (Max Amt)
// $55E1D8: [Float] Lock - Juju Speed
// $55E1E0: [Float] Lock - Juju Speed (Max Amt)

// $612594: [32bit] Active Character
//          0x00=Tak
//          0x01=Lok
function active_char() => dword(0x612594)

// $1AD7750: [Float] Lok Health (Max = 1.0)
// $1AE8E00: [Float] Tak Health 1.0 = Max
// $1D4FA80: [32bit] Selected Proving Grounds Car
// $1F0D000: [32bit] Proving Grounds - Tak & Lok Score



// $1F29350: [Float] Level Timer
function timer_lb() => dword(0x1F29350) //Read in DWord for usage with leaderboards. Float will be used for RP.
// $1F29354: [Float] Maximum Timer
function max_time() => float(0x1F29354)
// $1F29360: [32bit] Level Timer Active
//           0x00=No
//           0x01=Yes
function timer_active() => dword(0x1F29360)

// $1F29368: [32bit] Level Timer Shown
//           0x00=No
//           0x01=Yes
function timer_shown() => dword(0x1F29368)
CONST_NEGATIVE = 0x000080bf //-1 in float
leaderboard(
    "Silver Stone Coast Test",
    "Fastest time!",
    level_ID() == 2 && timer_lb() != CONST_NEGATIVE && prev(timer_lb()) == 0x4395f333 && timer_lb() < prev(timer_lb()), //299.9999 - Default Time
    level_ID() == 1,
    level_ID() == 2 && timer_active() < prev(timer_active()) && timer_active() == 0,
    unless(game_pause() == yes) && always_true(),
    "FRAMES",
    true
)

