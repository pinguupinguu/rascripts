// Nibblemen | Super Gobbler
// #ID = 21601

// $0000: [Lower4] Score - Hundred-Thousands
// $0001: [Lower4] Score- Ten-Thousands
// $0002: [Lower4] Score - Thousands
// $0003: [Lower4] Score - Hundreds
// $0004: [Lower4] Score - Tens
// $0005: [Lower4] Score - Ones
// $0030: Grid Top Half
// $0041: [8bit] Grid Ball Spot
//        0xfc=Normal
//        0xfd=Energy
// $0042: [8bit] Grid Ball Spot
// $0043: [8bit] Grid Ball Spot
// $0044: [8bit] Grid Ball Spot
// $0045: [8bit] Grid Ball Spot
// $0046: [8bit] Grid Ball Spot
// $0048: [8bit] Grid Ball Spot
// $0049: [8bit] Grid Ball Spot
// $004A: [8bit] Grid Ball Spot
// $004B: [8bit] Grid Ball Spot
// $004C: [8bit] Grid Ball Spot
// $004D: [8bit] Grid Ball Spot
// $0051: [8bit] Grid Ball Spot
// $0054: [8bit] Grid Ball Spot
// $0056: [8bit] Grid Ball Spot
// $0057: [8bit] Grid Ball Spot
// $0058: [8bit] Grid Ball Spot
// $005A: [8bit] Grid Ball Spot
// $005D: [8bit] Grid Ball Spot
// $0061: [8bit] Grid Ball Spot
// $0064: [8bit] Grid Ball Spot
// $0065: [8bit] Grid Ball Spot
// $0066: [8bit] Grid Ball Spot
// $0068: [8bit] Grid Ball Spot
// $0069: [8bit] Grid Ball Spot
// $006A: [8bit] Grid Ball Spot
// $006D: [8bit] Grid Ball Spot
// $0071: [8bit] Grid Ball Spot
// $0074: [8bit] Grid Ball Spot
// $007A: [8bit] Grid Ball Spot
// $007D: [8bit] Grid Ball Spot
// $0081: [8bit] Grid Ball Spot
// $0082: [8bit] Grid Ball Spot
// $0083: [8bit] Grid Ball Spot
// $0084: [8bit] Grid Ball Spot
// $0085: [8bit] Grid Ball Spot
// $0086: [8bit] Grid Ball Spot
// $0088: [8bit] Grid Ball Spot
// $0089: [8bit] Grid Ball Spot
// $008A: [8bit] Grid Ball Spot
// $008B: [8bit] Grid Ball Spot
// $008C: [8bit] Grid Ball Spot
// $008D: [8bit] Grid Ball Spot
// $0096: [8bit] Grid Ball Spot
// $0098: [8bit] Grid Ball Spot
// $00A1: [8bit] Grid Ball Spot
// $00A2: [8bit] Grid Ball Spot
// $00A3: [8bit] Grid Ball Spot
// $00A4: [8bit] Grid Ball Spot
// $00A5: [8bit] Grid Ball Spot
// $00A6: [8bit] Grid Ball Spot
// $00A7: [8bit] Grid Ball Spot
// $00A8: [8bit] Grid Ball Spot
// $00A9: [8bit] Grid Ball Spot
// $00AA: [8bit] Grid Ball Spot
// $00AB: [8bit] Grid Ball Spot
// $00AC: [8bit] Grid Ball Spot
// $00AD: [8bit] Grid Ball Spot
// $00B1: [8bit] Grid Ball Spot
// $00B5: [8bit] Grid Ball Spot
// $00B7: [8bit] Center Fruit
//        0x7f=Cherry
// $00B9: [8bit] Grid Ball Spot
// $00BD: [8bit] Grid Ball Spot
// $00C1: [8bit] Grid Ball Spot
// $00C2: [8bit] Grid Ball Spot
// $00C3: [8bit] Grid Ball Spot
// $00C4: [8bit] Grid Ball Spot
// $00C5: [8bit] Grid Ball Spot
// $00C9: [8bit] Grid Ball Spot
// $00CA: [8bit] Grid Ball Spot
// $00CB: [8bit] Grid Ball Spot
// $00CC: [8bit] Grid Ball Spot
// $00CD: [8bit] Grid Ball Spot

// $0200: Grid Bottom Half
// $0204: [8bit] Grid Ball Spot
// $020A: [8bit] Grid Ball Spot
// $0210: [8bit] Grid Ball Spot
// $0211: [8bit] Grid Ball Spot
// $0212: [8bit] Grid Ball Spot
// $0214: [8bit] Grid Ball Spot
// $021A: [8bit] Grid Ball Spot
// $021C: [8bit] Grid Ball Spot
// $021D: [8bit] Grid Ball Spot
// $021E: [8bit] Grid Ball Spot
// $0222: [8bit] Grid Ball Spot
// $0224: [8bit] Grid Ball Spot
// $022A: [8bit] Grid Ball Spot
// $022C: [8bit] Grid Ball Spot
// $0231: [8bit] Grid Ball Spot
// $0232: [8bit] Grid Ball Spot
// $0233: [8bit] Grid Ball Spot
// $0234: [8bit] Grid Ball Spot
// $0235: [8bit] Grid Ball Spot
// $0236: [8bit] Grid Ball Spot
// $0238: [8bit] Grid Ball Spot
// $0239: [8bit] Grid Ball Spot
// $023A: [8bit] Grid Ball Spot
// $023B: [8bit] Grid Ball Spot
// $023C: [8bit] Grid Ball Spot
// $023D: [8bit] Grid Ball Spot
// $0241: [8bit] Grid Ball Spot
// $024D: [8bit] Grid Ball Spot
// $0251: [8bit] Grid Ball Spot
// $0253: [8bit] Grid Ball Spot
// $0254: [8bit] Grid Ball Spot
// $0255: [8bit] Grid Ball Spot
// $0256: [8bit] Grid Ball Spot
// $0257: [8bit] Grid Ball Spot
// $0258: [8bit] Grid Ball Spot
// $0259: [8bit] Grid Ball Spot
// $025A: [8bit] Grid Ball Spot
// $025B: [8bit] Grid Ball Spot
// $025D: [8bit] Grid Ball Spot
// $0261: [8bit] Grid Ball Spot
// $0263: [8bit] Grid Ball Spot
// $0266: [8bit] Grid Ball Spot
// $0268: [8bit] Grid Ball Spot
// $026B: [8bit] Grid Ball Spot
// $026D: [8bit] Grid Ball Spot
// $0271: [8bit] Grid Ball Spot
// $0272: [8bit] Grid Ball Spot
// $0273: [8bit] Grid Ball Spot
// $0274: [8bit] Grid Ball Spot
// $0275: [8bit] Grid Ball Spot
// $0276: [8bit] Grid Ball Spot
// $0278: [8bit] Grid Ball Spot
// $0279: [8bit] Grid Ball Spot
// $027A: [8bit] Grid Ball Spot
// $027B: [8bit] Grid Ball Spot
// $027C: [8bit] Grid Ball Spot
// $027D: [8bit] Grid Ball Spot
// $0282: [8bit] Grid Ball Spot
// $0284: [8bit] Grid Ball Spot
// $028A: [8bit] Grid Ball Spot
// $028C: [8bit] Grid Ball Spot
// $0291: [8bit] Grid Ball Spot
// $0292: [8bit] Grid Ball Spot
// $0294: [8bit] Grid Ball Spot
// $0295: [8bit] Grid Ball Spot
// $0296: [8bit] Grid Ball Spot
// $0298: [8bit] Grid Ball Spot
// $0299: [8bit] Grid Ball Spot
// $029A: [8bit] Grid Ball Spot
// $029C: [8bit] Grid Ball Spot
// $029D: [8bit] Grid Ball Spot
// $02A1: [8bit] Grid Ball Spot
// $02AD: [8bit] Grid Ball Spot
// $02B1: [8bit] Grid Ball Spot
// $02B2: [8bit] Grid Ball Spot
// $02B3: [8bit] Grid Ball Spot
// $02B4: [8bit] Grid Ball Spot
// $02B5: [8bit] Grid Ball Spot
// $02B6: [8bit] Grid Ball Spot
// $02B7: [8bit] Grid Ball Spot
// $02B8: [8bit] Grid Ball Spot
// $02B9: [8bit] Grid Ball Spot
// $02BA: [8bit] Grid Ball Spot
// $02BB: [8bit] Grid Ball Spot
// $02BC: [8bit] Grid Ball Spot
// $02BD: [8bit] Grid Ball Spot
// $02DD: [8bit] Number of Hyperspace Jumps Used
//        5 Maximum
function inputs_off() => byte(0x108) == 0
// $00FA: [8bit] Game State
//        0x00=Inactive
//        0x01=Active
// $00FB: [8bit] Game Number
//        (Displayed value - Address + 1)
// $02DA: [8bit] Lives Used Up
//        0x03=Game Over
function lives() => byte(0x02da)
function ingame() => prev(byte(0x00fa)) == 1
function left_ball() => byte(0x0041)
function grid_clear() =>
    ingame() &&
    prev(left_ball()) == 0 &&
    left_ball() == 0xfc &&
    inputs_off() &&
    lives() != 3
// $02F5: [8bit] Option Number - 1
// $00FB: [8bit] Game Number
//        (Displayed value - Address + 1)
function game() => byte(0x00fb)
function option() => byte(0x02f5)
for i in range(0, 3){
    for j in range(0, 7){
        if(j > 3) my_points = 5
        else my_points = 3
        achievement(
            "Game " + i + 1 + " Option " + j + 1 + " Clear!",
            "Clear a grid on these settings!",
            points=my_points,
            trigger=
                game() == i &&
                option() == j &&
                grid_clear()
        )
    }        
}
function ones() => low4(0x0005)
function tens() => low4(0x0004) * 10
function hundreds() => low4(0x0003) * 100
function thousands() => low4(0x0002) * 1000
function tenthousands() => low4(0x0001) * 10000
function hundredthousands() => low4(0x0000) * 100000
function rp_score() => ones() + tens() + hundreds() + thousands() + tenthousands() + hundredthousands()
function cheevo_score() => ones() + tens() + hundreds() + thousands() + tenthousands()
function score_task(target) =>
    ingame() &&
        prev(cheevo_score()) < target &&
        cheevo_score() >= target
achievement(
    "Basic Eater",
    "Score 10,000 points (Any Mode and Option)",
    points=3,
    trigger=
        score_task(10000)
)
achievement(
    "Nibblin' Away!",
    "Score 25,000 points (Any Mode and Option)",
    points=5,
    trigger=
        score_task(25000)
)
achievement(
    "Nibble Master",
    "Score 50,000 points (Any Mode and Option)",
    points=5,
    trigger=
        score_task(50000)
)
function cherries_left() => byte(0x02df)
function cherry() => byte(0x00b7)
function y_coord() => byte(0x00f0)
function x_coord() => byte(0x00f1)
function cherry_coords() => x_coord() == 0x63 && y_coord() > 0x90 && y_coord() < 0x9f
function apple() => byte(0x0237)
function apple_coords() => x_coord() == 0x63 && y_coord() < 0x77
achievement(
    "Monster Slayer",
    "Eat a monster!",
    points=3,
    trigger=
        ingame() &&
        any_of(range(0x02e3, 0x02e5), b => prev(byte(b)) == 0 && byte(b) == 0xff)
)
achievement(
    "Cherry Pickup",
    "Eat the cherry bonus!",
    points=1,
    trigger=
        ingame() &&
        lives() != 3 &&
        prev(cherry()) == 0x7f &&
        cherry() == 0 &&
        cherry_coords()
)
achievement(
    "Apple Pickup",
    "Eat the apple bonus!",
    points=1,
    trigger=
        ingame() &&
        lives() != 3 &&
        prev(apple()) == 0xbe &&
        apple() == 0x00 &&
        apple_coords()
)
achievement(
    "Energized!",
    "Eat an Energizer!",
    points=2,
    trigger=
        ingame() &&
        lives() != 3 &&
        (always_false()
        || prev(byte(0x0051)) == 0xfd && byte(0x0051) == 0
        || prev(byte(0x005d)) == 0xfd && byte(0x005d) == 0
        || prev(byte(0x02a1)) == 0xfd && byte(0x02a1) == 0
        || prev(byte(0x02ad)) == 0xfd && byte(0x02ad) == 0        
        )
)
//High Score
function high_ones() => low4(0x000e)
function high_tens() => low4(0x000d) * 10
function high_hundreds() => low4(0x000c) * 100
function high_thousands() => low4(0x000b) * 1000
function high_tenthousands() => low4(0x000a) * 10000
function high_hundredthousands() => low4(0x0009) * 100000
function high_score() => high_ones() + high_tens() + high_hundreds() + high_thousands() + high_tenthousands() + high_hundredthousands()
rich_presence_conditional_display(lives() == 3, "Game Overed!")
rich_presence_conditional_display(ingame(), "Playing Game {0} on Option {1} Score: {2}",
    rich_presence_macro("Number", game() + 1),
    rich_presence_macro("Number", option() + 1),
    rich_presence_macro("Score", rp_score())
)
rich_presence_display("Selecting a game! High Score: {0}",
    rich_presence_macro("Score", high_score())
)
//Leaderboards
for i in range(0, 3){
    for j in range(0, 7) {
        leaderboard(
            "Game " + i + 1  + " Option " + j + 1 + " Score",
            "Highest points earned in this Game and Option!",
            game() == i && option() == j && prev(byte(0x00fa)) == 0 && byte(0x00fa) == 1, //ingame check as well
            always_false(),
            byte(0x108) != 0 || lives() == 3, //Submit if restart game, or other menu option selected or if lives are 0.
            rp_score(),
            "Score",
            false
        )                
    }
}